# Project             :   Screenipy
# Author              :   Pranjal Joshi
# Created             :   27/04/2021
# Description         :   Workflow for CI - Testing source and PR main for release


name: 0. New Features - Tests
env:
  package_name: pkscreener
on:
  push:
    branches: [ new-features ]
#   pull_request:
#     branches: [ new-features ]
  workflow_dispatch:
      inputs:
        name:
          description: 'Run Details'
          required: false
          default: 'New Features Tests'
        branch-name:
          description: 'Branch name'
          required: false
          default: 'new-features'

jobs:

  # Test the source-code
  Test-Source:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.branch-name }}
        
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Restore Dependencies from Cache
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies for TA-Lib
      run: |
        python -m pip install --upgrade pip
        cd .github/dependencies/
        echo %cd%
        pip install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl

    # - name: Install Numpy-MKL for Windows
    #   run: |
    #     echo Downloading Numpy-MKL (212MB), Please wait!
    #     powershell.exe -Command (new-object System.Net.WebClient).DownloadFile('https://download.lfd.uci.edu/pythonlibs/w4tscw6k/numpy-1.20.2+mkl-cp39-cp39-win_amd64.whl','numpy-1.20.2+mkl-cp39-cp39-win_amd64.whl')
    #     pip install numpy-1.20.2+mkl-cp39-cp39-win_amd64.whl

    - name: Install dependencies using pip
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-mock
        pip3 install -r requirements.txt
        pip3 install -r requirements-dev.txt
        pip3 install ta-lib
        pip3 install .
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Configure .env.dev file
      run: |
        python -c "import os; file = open('pkscreener/.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
      shell: bash
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}

    - name: Install coveralls
      shell: cmd
      continue-on-error: true
      run: |
        # note: the following also installs "coverage"
        python -m pip install coveralls
        del /s /q C:\Users\runneradmin\AppData\Local\Temp\*.py
    - name: Get coverage report
      shell: bash
      continue-on-error: true
      run: |
        rm -rf .pytest_cache
        cd test
        # find . -name "*.pyc" -exec rm -rf {} \;
        coverage erase
        coverage run --source=${package_name} --append -m pytest -v
        # coverage run --source=${package_name} --append -m test.specification --ignore-known
        # quick local report output to console:
        coverage report
        coverage html
        coverage xml
        cd ..
    - name: Upload report to Coveralls
      # documentation for GitHub setup: https://coveralls-python.readthedocs.io/en/latest/usage/configuration.html#github-actions-support
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coveralls --service=github --finish

  Call-prod-scan-test-workflow:
    uses: pkjmesra/PKScreener/.github/workflows/workflow-prod-scans_Tests.yml@main
    with:
      branch-name: ${{ inputs.branch-name }}
    secrets: inherit

  # Job to create PR
  Create-Pull-Request:
    if: ${{ inputs.branch-name }} != 'main'
    runs-on: ubuntu-latest
    needs: [Test-Source, call-prod-scan-test-workflow]

    steps:
    - name: Checkout Repo before PR
      uses: actions/checkout@v2
    
    - name: Create Pull Request ( ${{ inputs.branch-name }} -> main)
      id: create_pr
      uses: repo-sync/pull-request@v2
      with:
        source_branch: ${{ inputs.branch-name }}
        destination_branch: "main"
        pr_title: "[pkscreener Test] New Features Added - Test Passed"
        pr_body: |
          **This PR has been generated automatically** by **pkscreener Test - New Features** workflow due to test passed for a latest push on the **new-features** branch.
          
          View commits for changelog.
        pr_label: "Test-Passed"
        pr_draft: false
        pr_allow_empty: true
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create PR Log file
      shell: bash
      run: |
        echo ${{steps.create_pr.outputs.pr_url}} >> pr.txt
        echo ${{steps.create_pr.outputs.pr_number}} >> pr.txt

    - name: Save PR Log File
      uses: actions/upload-artifact@v2
      with:
        name: PR_Log.txt
        path: pr.txt
