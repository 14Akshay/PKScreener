# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
# This workflows will upload a Python Package using Twine when a commit is pushed
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: 2. PyPi Publish

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'PyPi Publish'
        required: false
        default: 'PyPi Publish'

      branch-name:
        description: 'branch-name'
        required: true
        type: string
        default: 'main'
        
      version:
        description: 'Release version'
        required: true
        type: string
        default: 'x.y.z'

      sendNotification:
        description: 'Should we send notification to public telegram channel about this release?'
        type: string
        required: false
        default: 'yes'

      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.11'

  # schedule:
  #   - cron: '30 7 * * 6'
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
        default: 'main'
      version:
        required: true
        type: string
        default: 'x.y.z'
      sendNotification:
        description: 'Should we send notification to public telegram channel about this release?'
        type: string
        required: false
        default: 'no'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.11'

jobs:
  check_should_run:
      runs-on: windows-latest
      name: Check latest commit
      outputs:
        should_run: ${{ steps.should_run.outputs.should_run }}
      steps:
        - uses: actions/checkout@v2
          with:
            ref: main
        - name: print latest_commit
          run: echo ${{ github.sha }}

        - id: should_run
          continue-on-error: true
          name: check latest commit is less than a week
          if: ${{ github.event_name == 'workflow_call' }} || ${{ github.event_name == 'workflow_dispatch' }}
          shell: bash
          run: test -z $(git rev-list  --after="7 days"  ${{ github.sha }} --max-count=1) && echo "::set-output name=should_run::false"

  deploy:

    runs-on: windows-latest
    needs: check_should_run
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.branch-name }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.targetPythonVersion || 3.11 }}

    - name: Restore Dependencies from Cache
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install TA-Lib
      shell: bash
      run: |
        python3 -m pip install --upgrade pip
        cd .github/dependencies/
        if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
          pip3 install TA_Lib-0.4.28-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
          pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
          pip3 install TA_Lib-0.4.28-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
          pip3 install TA_Lib-0.4.28-cp312-cp312-win_amd64.whl
        fi

    - name: Install Python Dependencies
      run: |
        pip3 install -r requirements.txt
        pip3 install -r requirements-dev.txt
    
    - name: Declare env variables
      id: vars
      shell: bash
      run: |
        GITHUB_REF=${GITHUB_REF#refs/tags/}
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        CURRENT_VERSION=`grep -o "'.*'" pkscreener/classes/__init__.py | sed "s/'//g"`
        VERSION_ARR=(${CURRENT_VERSION//./ })
        MAJOR_MINOR=${VERSION_ARR[0]}.${VERSION_ARR[1]}
        TODAY=`date +%Y%m%d`
        THIS_VERSION=${MAJOR_MINOR}.${TODAY}.${{github.run_number}}
        echo ${THIS_VERSION}
        if [ "${{ inputs.version }}" == "x.y.z" ]; then
          echo "default version x.y.z cannot be used"
        else
          THIS_VERSION="${{ inputs.version }}"
        fi
        rm -rf pkscreener/classes/__init__.py
        echo VERSION=\'`echo ${THIS_VERSION}`\' >> pkscreener/classes/__init__.py
        echo "##[set-output name=THIS_VERSION;]$(echo ${THIS_VERSION})"
        echo "##[set-output name=CURRENT_VERSION;]$(echo ${CURRENT_VERSION})"
       
    - name: Install setuptools and build
      shell: cmd
      run: |
        pip3 install setuptools wheel twine
        rmdir /s /q build
        rmdir /s /q dist
        python3 setup.py clean build sdist bdist_wheel

    - name: Build and publish distribution ðŸ“¦ to Test PyPI
      if: ${{ needs.check_should_run.outputs.should_run != 'false' }}
      env:
        TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        repository_url: https://test.pypi.org/legacy/
      shell: cmd
      run: |
        # del /s /q pkscreener/classes/__init__.py
        # echo VERSION='${{ steps.vars.outputs.THIS_VERSION }}' >> pkscreener/classes/__init__.py
        twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*

    - name: Publish distribution ðŸ“¦ to PyPI
      if: startsWith(github.ref, 'refs/tags') || ${{ needs.check_should_run.outputs.should_run != 'false' }}
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        repository_url: https://upload.pypi.org/legacy/
      shell: cmd
      run: |
        # del /s /q pkscreener/classes/__init__.py
        # echo VERSION='${{ steps.vars.outputs.THIS_VERSION }}' >> pkscreener/classes/__init__.py
        twine upload --verbose dist/*

    - name: Configure .env.dev file for Prod
      shell: bash
      if: ${{ inputs.sendNotification != 'no' }}
      env:
        CHAT_ID_PROD : ${{secrets.CHAT_ID_PROD}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
      run: |
        python3 -c "import os; file = open('.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_PROD']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
      
    - name: Configure .env.dev file for Dev
      shell: bash
      if: ${{ inputs.sendNotification == 'no' }}
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
      run: |
        python3 -c "import os; file = open('.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
        
    - name: Environment setup to get whats new
      shell: bash
      id: whatsnewgetter
      run: |
        pip3 install pkscreener
        python3 .github/workflows/githubutilities.py -w

    - name: Send notification about new release
      shell: bash
      env:
        RELEASE_VERSION : ${{ steps.vars.outputs.THIS_VERSION }}
        WHATS_NEW: ${{ steps.vars.outputs.WHATS_NEW_IN_THIS_RELEASE }}
      run: |
        pip3 install .
        python3 -c "import os; from PKDevTools.classes.Telegram import send_message; send_message('Dear Channel!\nA new version of PKScreener (v' + os.environ['RELEASE_VERSION'] + ') just got released. Check it out at \n\nhttps://github.com/pkjmesra/PKScreener/releases\n or https://pypi.org/project/pkscreener/ \n\n'+os.environ['WHATS_NEW']+'\n');"

  Delete_Workflow_Run:
    runs-on: ubuntu-20.04
    needs: [deploy]
    name: Delete workflow run
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
          
      - name: Delete this workflow run
        if: startsWith(runner.os, 'Linux')
        shell: bash
        run: |
          for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"success\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
          # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
          # for id in $(gh run list -w "13. Backtest for Generic" --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
        env:
          GH_TOKEN : ${{secrets.GITHUB_TOKEN}}