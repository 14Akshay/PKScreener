# This workflows will upload a Python Package using Twine when a commit is pushed
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: PyPi Publish

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'PyPi Publish'
        required: false
        default: 'PyPi Publish'

      branch-name:
        description: 'branch-name'
        required: true
        type: string
        default: 'main'
        
      version:
        description: 'Release version'
        required: true
        type: string
        default: 'x.y.z'

  # schedule:
  #   - cron: '30 7 * * 6'
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
        default: 'main'
      version:
        required: true
        type: string
        default: 'x.y.z'

jobs:
  check_should_run:
      runs-on: windows-latest
      name: Check latest commit
      outputs:
        should_run: ${{ steps.should_run.outputs.should_run }}
      steps:
        - uses: actions/checkout@v2
          with:
            ref: main
        - name: print latest_commit
          run: echo ${{ github.sha }}

        - id: should_run
          continue-on-error: true
          name: check latest commit is less than a week
          if: ${{ github.event_name == 'schedule' }} || ${{ github.event_name == 'workflow_dispatch' }}
          run: test -z $(git rev-list  --after="7 days"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  deploy:

    runs-on: windows-latest
    needs: check_should_run
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.branch-name }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Restore Dependencies from Cache
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install TA-Lib
      run: |
        python -m pip install --upgrade pip
        cd .github/dependencies/
        echo %cd%
        pip install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl

    - name: Install Python Dependencies
      run: |
        pip install -r requirements.txt
        pip3 install -r requirements-dev.txt
        pip install ta-lib

    - name: Install setuptools
      run: |
        pip install setuptools wheel twine
    
    - name: Declare env variables
      id: vars
      shell: bash
      run: |
        GITHUB_REF=${GITHUB_REF#refs/tags/}
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        CURRENT_VERSION=`grep -o "'.*'" pkscreener/classes/__init__.py | sed "s/'//g"`
        VERSION_ARR=(${CURRENT_VERSION//./ })
        MAJOR_MINOR=${VERSION_ARR[0]}.${VERSION_ARR[1]}
        TODAY=`date +%Y%m%d`
        THIS_VERSION=${MAJOR_MINOR}.${TODAY}.${{github.run_number}}
        echo ${THIS_VERSION}
        if [ "${{ inputs.version }}" == "x.y.z" ]; then
          echo "default version x.y.z cannot be used"
        else
          THIS_VERSION="${{ inputs.version }}"
        fi
        rm -rf pkscreener/classes/__init__.py
        echo VERSION=\'`echo ${THIS_VERSION}`\' >> pkscreener/classes/__init__.py
        echo "##[set-output name=THIS_VERSION;]$(echo ${THIS_VERSION})"
        echo "##[set-output name=CURRENT_VERSION;]$(echo ${CURRENT_VERSION})"
       
    - name: Build and publish distribution ðŸ“¦ to Test PyPI
      if: ${{ needs.check_should_run.outputs.should_run != 'false' }}
      env:
        TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        repository_url: https://test.pypi.org/legacy/
      shell: cmd
      run: |
        rmdir /s /q build
        rmdir /s /q dist
        # del /s /q pkscreener/classes/__init__.py
        # echo VERSION='${{ steps.vars.outputs.THIS_VERSION }}' >> pkscreener/classes/__init__.py
        python setup.py clean build sdist bdist_wheel
        twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*
    - name: Publish distribution ðŸ“¦ to PyPI
    
      if: startsWith(github.ref, 'refs/tags') || ${{ needs.check_should_run.outputs.should_run != 'false' }}
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        repository_url: https://upload.pypi.org/legacy/
      shell: cmd
      run: |
        rmdir /s /q build
        rmdir /s /q dist
        # del /s /q pkscreener/classes/__init__.py
        # echo VERSION='${{ steps.vars.outputs.THIS_VERSION }}' >> pkscreener/classes/__init__.py
        python setup.py clean build sdist bdist_wheel
        twine upload --verbose dist/*
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheel-egg-code-tar-${{ steps.vars.outputs.THIS_VERSION }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
        path: |
          dist
    - name: Configure .env.dev file
      shell: bash
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
      run: |
        python -c "import os; file = open('pkscreener/.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
      
    - name: Send notification about new release
      shell: bash
      env:
        RELEASE_VERSION : ${{ steps.vars.outputs.THIS_VERSION }}
      run: |
        cd pkscreener
        python -c "import os; from Telegram import send_message; send_message('Dear Channel!\nA new version of PKScreener(v' + os.environ['RELEASE_VERSION'] + ') just got released.\nCheck it out at \n\nhttps://github.com/pkjmesra/PKScreener/releases or \n\nhttps://pypi.org/project/pkscreener/')"
       
      
